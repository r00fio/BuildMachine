/**
 * Created by shubnik on 22.06.2015.
 */
var DAOService = (function () {

    return {
        connect: DAO.connect,
        disconnect: DAO.disconnect,
        generateOneTimePasswordForAuth: CleverClient.generateOneTimePasswordForAuth,
        confirmLoginAction: CleverClient.confirmLoginAction,
        confirmRestoreAccess: CleverClient.confirmRestoreAccess,
        logout: CleverClient.logout,
        clearSession: CleverClient.clearSession,
        setVologdaURL: CleverClient.setVologdaURL,

        getEntityById: DAO.getEntityById,
        getEntityByUuid: DAO.getEntityByUuid,
        getEntityByCondition: DAO.getEntityByCondition,
        getEntitiesByKindStrId: DAO.getEntitiesByKindStrId,
        getEntitiesByCondition: DAO.getEntitiesByCondition,
        getCodifierValues: DAOHelper.getCodifierValues,

        getExpandedEntity: DAO.getExpandedEntity,
        getRetailUser: DAO.getRetailUser,
        getStringValueData: DAO.getStringValueData,
        insert: DAO.insert,
        invokeEmpty: DAO.invokeEmpty,
        invokeMethod: DAO.invokeMethod,
        invokeMethodAsync: DAO.invokeMethodAsync,
        invokeEntityMethod: DAO.invokeEntityMethod,
        invokeEntityMethodAsync: DAO.invokeEntityMethodAsync,
        invokeUserEntityMethod: DAO.invokeUserEntityMethod,
        invokeUserEntityMethodAsync: DAO.invokeUserEntityMethodAsync,
        invokeRetailClientEntityMethod: DAO.invokeRetailClientEntityMethod,

        getRetailClient: DAOHelper.getRetailClient,
        getAggregateBalance: DAOHelper.getAggregateBalance,
        getNews: DAOHelper.getNews,
        getNoticeList: DAOHelper.getNoticeList,
        getControllingCosts: DAOHelper.getControllingCosts,
        saveBudgetCategory: DAOHelper.saveBudgetCategory,
        saveBudgetCategories: DAOHelper.saveBudgetCategories,
        getRetailReqDocBaseList: DAOHelper.getRetailReqDocBaseList,
        getAddressElementListByKLADR: DAOHelper.getAddressElementListByKLADR,
        getGlobalSettings: DAOHelper.getGlobalSettings,
        checkCodeByResumeApp: DAOHelper.checkCodeByResumeApp,


        /* кредиты */
        getLoanList: DAORetailLoanService.getLoanList,
        getRetailLoanPaymentSchedule: DAORetailLoanService.getRetailLoanPaymentSchedule,

        /* счета */
        getAccountList: DAORetailAccountService.getAccountList,
        getAccountProductList: DAORetailAccountService.getAccountProductList,
        getSourceProductForNewAccount: DAORetailAccountService.getSourceProductForNewAccount,
        getTariffAmountAndRateForNewAccount: DAORetailAccountService.getTariffAmountAndRateForNewAccount,
        sendNewAccountRequest: DAORetailAccountService.sendNewAccountRequest,
        checkAccountReference: DAORetailAccountService.checkAccountReference,
        getRateInfo: DAORetailAccountService.getRateInfo,

        /* вклады */
        getDepositList: DAORetailDepositService.getDepositList,
        getHistoryRates: DAORetailDepositService.getHistoryRates,
        getDepositsToCompare: DAORetailDepositService.getDepositsToCompare,
        getDepositTerms: DAORetailDepositService.getDepositTerms,
        getExternalInterestAmount: DAORetailDepositService.getExternalInterestAmount,
        getSourceForInitDeposit: DAORetailDepositService.getSourceForInitDeposit,
        getAccountForClosingDeposit: DAORetailDepositService.getAccountForClosingDeposit,
        getFinalAmount: DAORetailDepositService.getFinalAmount,
        sendOpenDepositRequest: DAORetailDepositService.sendOpenDepositRequest,
        getDepositRatesTable: DAORetailDepositService.getDepositRatesTable,

        /* карты */
        getCardList: DAOBankCardService.getCardList,
        getBankCardById: DAOBankCardService.getBankCardById,
        sendRetailCardInsuranceRequest: DAOBankCardService.sendRetailCardInsuranceRequest,
        getTariffAmountForInsuranceOption: DAOBankCardService.getTariffAmountForInsuranceOption,
        getRetailCardInsuranceParams: DAOBankCardService.getRetailCardInsuranceParams,
        getRetailCardReisRqData: DAOBankCardService.getRetailCardReisRqData,
        sendRetailBankCardBlockRequest: DAOBankCardService.sendRetailBankCardBlockRequest,
        sendRetailProdOptRequest: DAOBankCardService.sendRetailProdOptRequest,
        sendRetailBankCardReissueRequest: DAOBankCardService.sendRetailBankCardReissueRequest,
        sendRetailAutoPayRequest: DAOBankCardService.sendRetailAutoPayRequest,
        getAutoPayBalanceParams: DAOBankCardService.getAutoPayBalanceParams,
        getCardBonusInfo: DAOBankCardService.getCardBonusInfo,
        getExtractForBonuses: DAOBankCardService.getExtractForBonuses,
        sendVirtualCardRequisites: DAOBankCardService.sendVirtualCardRequisites,

        updateProduct: DAORetailProductService.updateProduct,
        getLinkedProducts: DAORetailProductService.getLinkedProducts,
        sendEmail: DAORetailProductService.sendEmail,
        checkUseInRegularPayments: DAORetailProductService.checkUseInRegularPayments,
        setDisabled: DAORetailProductService.setDisabled,
        setIsFavourite: DAORetailProductService.setIsFavourite,
        getExtract: DAORetailProductService.getExtract,
        saveOperationCategory: DAORetailProductService.saveOperationCategory,
        saveOperationComment: DAORetailProductService.saveOperationComment,
        getProductServices: DAORetailProductService.getProductServices,
        getReplenishmentDetails: DAORetailProductService.getReplenishmentDetails,
        getTariffOptionsSMSBankInfo: DAORetailProductService.getTariffOptionsSMSBankInfo,
        getPaymentSourceList: DAORetailProductService.getPaymentSourceList,
        sendSMSBankInfoRequest: DAORetailProductService.sendSMSBankInfoRequest,
        renameProduct: DAORetailProductService.renameProduct,
        getRegionList: DAORetailProductService.getRegionList,
        getTermMakingEmbassyRef: DAORetailProductService.getTermMakingEmbassyRef,
        sendEmbassyDocRequest: DAORetailProductService.sendEmbassyDocRequest,
        getProductListForClosing: DAORetailProductService.getProductListForClosing,
        getProductListForCredit: DAORetailProductService.getProductListForCredit,
        sendProductClosingRequest: DAORetailProductService.sendProductClosingRequest,
        getBusinessProductAsObject: DAORetailProductService.getBusinessProductAsObject,
        sendRetailVirtCardRequest: DAORetailProductService.sendRetailVirtCardRequest,

        /* Платежи и переводы */
        getOnlineOperations: DAOPaymentService.getOnlineOperations,
        getRegionsForPayment: DAOPaymentService.getRegionsForPayment,
        setPaymentRegion: DAOPaymentService.setPaymentRegion,
        getCategoriesForPayment: DAOPaymentService.getCategoriesForPayment,
        getSourcesListForPayment: DAOPaymentService.getSourcesListForPayment,
        getPayeeBank: DAOPaymentService.getPayeeBank,
        validateAndSaveRetailRubPayment: DAOPaymentService.validateAndSaveRetailRubPayment,
        getBrokerPaymentParams: DAOPaymentService.getBrokerPaymentParams,
        getJuridicalPaymentParams: DAOPaymentService.getJuridicalPaymentParams,
        getServicePaymentParams: DAOPaymentService.getServicePaymentParams,
        validateAndSaveRetailServicePay: DAOPaymentService.validateAndSaveRetailServicePay,
        validateAndSaveRetailTransfer: DAOPaymentService.validateAndSaveRetailTransfer,
        getConversionRateForTransfer: DAOPaymentService.getConversionRateForTransfer,
        validateAndSaveRetailICTransfer: DAOPaymentService.validateAndSaveRetailICTransfer,
        validateAndSaveRetailPayToCard: DAOPaymentService.validateAndSaveRetailPayToCard,
        getFavouritesPayments: DAOPaymentService.getFavouritesPayments,
        validateAndSaveRetailTrToFriend: DAOPaymentService.validateAndSaveRetailTrToFriend,
        importPhoneBook: DAOPaymentService.importPhoneBook,
        addOrRefreshSocialNetwork: DAOPaymentService.addOrRefreshSocialNetwork,
        deleteFromSocialNetwork: DAOPaymentService.deleteFromSocialNetwork,
        getFriendsForPaymentParams: DAOPaymentService.getFriendsForPaymentParams,
        getSocialNetworksParams: DAOPaymentService.getSocialNetworksParams,
        getMGTSChargeList: DAOPaymentService.getMGTSChargeList,
        getSearchResultForPayment: DAOPaymentService.getSearchResultForPayment,
        sendToEmailPaymentReceipt: DAOPaymentService.sendToEmailPaymentReceipt,
        searchPayeeBaseName: DAOPaymentService.searchPayeeBaseName,

        /* Инфосервисы */
        /* Идеи и предложения */
        getIdeas: DAOInfoServices.getIdeas,
        createIdea: DAOInfoServices.createIdea,
        voteForIdea: DAOInfoServices.voteForIdea,
        /* Курсы валют */
        getCurrentRates: DAOInfoServices.getCurrentRates,
        getCurrencyRateHistory: DAOInfoServices.getCurrencyRateHistory,
        /* Общение с банком */
        getMessages: DAOInfoServices.getMessages,
        getNewChatMessages: DAOInfoServices.getNewChatMessages,
        markChatMessagesAsRead: DAOInfoServices.markChatMessagesAsRead,
        sendMessage: DAOInfoServices.sendMessage,
        /* Контакты и реквизиты банка */
        getMapObjects: DAOInfoServices.getMapObjects,
        getNearestGeoObjects: DAOInfoServices.getNearestGeoObjects,
        /* Справочный центр */
        getQuestionCategories: DAOInfoServices.getQuestionCategories,
        getRetailDocBaseList: DAOInfoServices.getRetailDocBaseList,

        /* Лояльность */
        getBonusInfo: DAOLoyaltyService.getBonusInfo,
        getPartnersInfo: DAOLoyaltyService.getPartnersInfo,
        getPromosInfo: DAOLoyaltyService.getPromosInfo,
        getSourceListForOption: DAOLoyaltyService.getSourceListForOption,

        /* Клиентские методы */
        changeFieldValue: DAORetailClientService.changeFieldValue,
        changeMobileTelephone: DAORetailClientService.changeMobileTelephone,
        changeFactAddress: DAORetailClientService.changeFactAddress,
        createDriverDoc: DAORetailClientService.createDriverDoc,
        changeDriverDoc: DAORetailClientService.changeDriverDoc,
        deleteDriverDoc: DAORetailClientService.deleteDriverDoc,
        createTransportPass: DAORetailClientService.createTransportPass,
        changeTransportPass: DAORetailClientService.changeTransportPass,
        deleteTransportPass: DAORetailClientService.deleteTransportPass,
        createPersonalAccount: DAORetailClientService.createPersonalAccount,
        getNearestOffice: DAORetailClientService.getNearestOffice,
        changePhoto: DAORetailClientService.changePhoto,
        getUserSettings: DAORetailClientService.getUserSettings,
        changeLogin: DAORetailClientService.changeLogin,
        changePassword: DAORetailClientService.changePassword,
        changeCodeDate: DAORetailClientService.changeCodeDate,
        createLoginPassword: DAORetailClientService.createLoginPassword,
        changeLoginPassword: DAORetailClientService.changeLoginPassword,
        registerShortCode: DAORetailClientService.registerShortCode,
        registerTouchID: DAORetailClientService.registerTouchID,
        changeShortCode: DAORetailClientService.changeShortCode,
        setVisibleCloseProducts: DAORetailClientService.setVisibleCloseProducts
    };
})();